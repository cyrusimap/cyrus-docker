#!/usr/bin/env perl
use v5.34.0; # This is what macOS is shipping now. -- rjbs, 2025-03-14
use experimental 'signatures'; # Everything we use is stable and accepted.
use warnings;

package Cyrus::Docker::dar;

use utf8;

BEGIN {
  my @missing;
  for my $prereq (
    'IPC::Run',
    'Path::Tiny',
    'Process::Status',
  ) {
    my $ok = eval "require $prereq; 1";
    push @missing, $prereq unless $ok;
  }

  if (@missing) {
    my $error = join qq{\n}, (
      "You're missing some required modules, please install them:",
      map {; "  $_" } @missing,
    );

    die "$error\n";
  }
}

# Core
use Digest::SHA qw(sha1_hex);
use Getopt::Long ();
use JSON::PP;
use Term::ANSIColor qw(colored);

# CPAN
use IPC::Run qw(run);
use Path::Tiny;
use Process::Status;

my $MINIMUM_IMAGE_VERSION = 1;

binmode *STDOUT, ':encoding(utf-8)';
binmode *STDERR, ':encoding(utf-8)';

my $is_tty = -t *STDOUT;

unless ($is_tty) {
  # Why //=?  So you can, in a pinch, undisable them without a TTY by setting
  # it to a 0.
  $ENV{ANSI_COLORS_DISABLED} //= 1;
}

my $MENU = <<~'END';
dar: the cyrus-docker dev tool

Run "dar COMMAND".  Here are some commands:
 • pull     - pull the latest docker container image
 • start    - start a container to build in the current dir
 • prune    - stop and destroy the container for this dir
 • help     - get more information about how to use dar
 • run      - run the given command in the container
 • cyd      - a shortcut for "dar run cyd ..."

And these commands all run "dar cyd CMD" in the container:
 • build    - configure and compile Cyrus
 • clean    - "make clean" the repo
 • makedocs - build the html version of the docs
 • shell    - run a shell
 • smoke    - sugar for "build then test"
 • test     - run the Cassandane test suite
END

$MENU =~ s{([/|\\]+)}{colored(['bright_blue'], "$1")}ge;
$MENU =~ s{• \K([^-]+)}{colored(['bright_yellow'], "$1")}ge;

my $HELP = <<'END';
dar helps manage Docker containers for building and testing cyrus-imapd, using
a copy of the source stored on your computer.

To get a contaner running…

1. cd to your local clone of cyrus-imapd
2. run "dar pull" to make sure you have the latest cyrus-docker image
3. run "dar start" to get a running container

Once you have that, you run "dar XYZ" to run "cyd XYZ" inside the container.
This is most useful for: built, test, smoke, and sh.

When you want to clean up the container you've got running, run "dar prune".

The default image is ghcr.io/cyrusimap/cyrus-docker:bookworm (or bookworm-arm
on ARM64), but you can set a different default for all your uses of "dar" by
creating the file ~/.cyrus-docker/config, which should contain a JSON object.
The only meaningful key, for now, is "default_image", which provides an
alternate default image.
END

my $command = @ARGV ? shift(@ARGV) : 'commands';

# turn --help into help, and support old-style "--prune" etc.
$command =~ s/\A--//;

my $ABS_CWD = path('.')->absolute;

my $CONFIG  = Cyrus::Docker::dar->load_config();

my $method = __PACKAGE__->can("do_" . $command);

unless ($method) {
  die qq{❌ Unknown command requested: "$command".  Try "dar help".\n};
}

__PACKAGE__->$method([@ARGV]);

my sub emptyref {
  my $str = q{};
  return \$str;
}

sub do_help {
  print $HELP;
  return;
}

sub do_commands {
  print $MENU;
  return;
}

sub do_pull ($class, $args) {
  # Generally, this should not fail..?
  die "error parsing arguments!\n" unless Getopt::Long::GetOptionsFromArray(
    $args,
    'image=s' => \my $opt_image,
  );

  my $image_specifier = $class->_requested_image($opt_image);

  system('docker', 'pull', $image_specifier);
  $? && die "❌ Error fetching image $image_specifier\n";

  say "✅ Container image up to date.";
  return;
}

sub do_start ($class, $args) {
  # Generally, this should not fail..?
  die "error parsing arguments!\n" unless Getopt::Long::GetOptionsFromArray(
    $args,
    'keep'    => \my $opt_keep,
    'image=s' => \my $opt_image,
    'run-outside-clone' => \my $run_outside_clone,
  );

  #   [ 'keep',     'keep the container after exit' ],
  #   [ 'image=s',  'which image to use' ],
  #   [ 'run-outside-clone', 'run even if cwd is not a cyrus-imapd clone' ],

  unless (-e 'imap/imapd.c' || $run_outside_clone) {
    die <<~'END';
    The current directory doesn't appear to be a cyrus-imapd clone.  To run dar
    anyway, pass the --run-outside-clone switch.
    END
  }

  my $existing_container = $class->_existing_container;

  if ($existing_container) {
    unless ($existing_container->{State} eq 'exited') {
      # There are states other than running and exited, but we're going to
      # treat anything but "exited" as "still running" for now.
      die "❌ The container $existing_container->{Names} is already running!\n";
    }

    if ($existing_container->{Command} ne q{"cyd idle"}) {
      # I don't think this should ever happen either...
      die "❌ Weird: existing container isn't set to run cyd idle.  Giving up.\n";
    }

    say "⏳ Restarting container $existing_container->{Names} to idle.";
    run(
      [ 'docker', 'start', $existing_container->{ID} ],
      emptyref(),
      \my $container_id,
    );

    Process::Status->assert_ok("❌ Restarting container");
    return $existing_container;
  }

  my $name = $class->container_name_for_cwd;
  say "⏳ Starting container $name to idle.";

  my $image_specifier = $class->_requested_image($opt_image);

  {
    # Assert that we have the image.  If not, point user to "dar pull"
    run(
      [ 'docker', 'image', 'ls', '--format', 'json', $image_specifier ],
      emptyref(),
      \my $image_json_lines,
    );

    Process::Status->assert_ok("❌ Getting list of available images");

    chomp $image_json_lines;
    my @lines = split /\n/, $image_json_lines;

    @lines == 0
      && die qq{❌ The image $image_specifier isn't available.  Maybe you should "dar pull".};

    @lines > 1
      && die qq{❌ $image_specifier matches more than one candidate image.};
  }

  my $image = $class->_get_image($image_specifier);

  my $image_version = $image->{Config}{Labels}{'org.cyrusimap.cyrus-docker.version'};

  unless ($image_version && $image_version >= $MINIMUM_IMAGE_VERSION) {
    # In the future, when we actually *use* this facility for something, we may
    # want to be more specific, like "you need v3 minimum" or "the following
    # commands will not work without v3" or whatever.  For now, "just update"
    # seems solid.
    die "❌ This container is too old for this version of dar.\n";
  }

  run(
    [
      'docker', 'run',
      '--detach',
      '--name', $name,
      '--mount', "type=bind,src=$ABS_CWD,dst=/srv/cyrus-imapd",
      ($opt_keep ? () : '--rm'),
      $image_specifier,
      qw( cyd idle )
    ],
    emptyref(),
    \my $container_id,
  );

  Process::Status->assert_ok("❌ Starting idle container");

  chomp $container_id;
  say "✅ Container started, id: $container_id";

  my $container = $class->_existing_container;

  unless ($container) {
    # This is another one of those "should never happen" things…
    die "❌ The container was started, but now can't be found!\n"
  }

  # We need the git-version.sh program to work, which means that "git describe"
  # needs to work in the container's git repo, but it will be running as root,
  # so git will complain about mismatched ownership unless we mark this
  # directory safe. -- rjbs, 2024-12-27
  run([
    qw( docker exec ), $container->{ID},
    qw( git config --global --add safe.directory /srv/cyrus-imapd ),
  ]);

  Process::Status->assert_ok("❌ Fixing git permissions in container");

  return $class->_existing_container;
}

sub do_prune ($class, $args) {
  @$args && die "❌ You can't supply a command to run with --prune.\n";

  my $container = $class->_existing_container;

  unless ($container) {
    say "✅ Nothing to clean up.";
    return;
  }

  run(
    [ qw( docker inspect ), $container->{ID} ],
    emptyref(),
    \my $inspect_json,
  );

  Process::Status->assert_ok("❌ Inspecting stopped container");

  my $inspect = decode_json($inspect_json);
  my $autoremove = $inspect->[0]{HostConfig}{AutoRemove};

  run(
    [ qw( docker container stop ), $container->{ID} ],
    emptyref(),
    emptyref(),
  );

  Process::Status->assert_ok("❌ Stopping existing container");

  say "✅ Container stopped.";

  unless ($autoremove) {
    run([ qw( docker container rm ), $container->{ID} ]);
    Process::Status->assert_ok("❌ Removing stopped container");
  }
}

BEGIN {
  for my $cyd_cmd (qw( build clean makedocs shell smoke test)) {
    my $code = sub ($class, $args) {
      $class->do_run([ 'cyd', $cyd_cmd, @$args ]);
    };

    no strict 'refs';
    *{"do_$cyd_cmd"} = $code;
  }

  {
    no warnings 'once';
    *do_sh = \&do_shell;
  }
}

sub do_clone ($class, $args) {
  die "❌ clone is a cyd command, but not a dar command.\n";
}

sub do_cyd ($class, $args) {
  $class->do_run([ 'cyd', @$args ]);
}

sub do_run ($class, $args) {
  my $container = $class->_existing_container;

  unless ($container && $container->{State} eq 'running') {
    die qq{❌ You don't have a running container.  You'll want to run "dar start".\n};
  }

  if ($container->{Command} ne q{"cyd idle"}) {
    # I don't think this should ever happen either...
    die "❌ Weird: existing container isn't running cyd idle.  Giving up.\n";
  }

  say "⏳ Executing command in container $container->{ID}...";

  exec(
    qw( docker exec --workdir /srv/cyrus-imapd -ti ),
    $container->{ID},
    @$args,
  );
}

sub _requested_image ($class, $opt_image) {
  state $uname  = `uname -a`;
  state $suffix = $uname =~ /\barm64\b/ ? '-arm' : q{};

  return $opt_image
      // $CONFIG->{default_image}
      // "ghcr.io/cyrusimap/cyrus-docker:bookworm$suffix";
}

sub _get_image ($class, $image_specifier) {
  run(
    [ 'docker', 'image', 'inspect', $image_specifier ],
    emptyref(),
    \my $json,
  );

  Process::Status->assert_ok("❌ Inspecting image");

  my $data = decode_json($json);

  if (@$data > 1) {
    die "❌ More than one image description came back from docker image inspect?!\n";
  }

  return $data->[0];
}

sub _get_containers {
  my %container_named = do {
    my (@lines) = `docker container list -a --format json`;

    Process::Status->assert_ok("❌ Getting container list");
    chomp @lines;

    # Names?  Plural?  I'm gonna guess that if you do weird things you can get
    # "name1,name2" but for now I will not worry about it -- rjbs, 2024-12-24
    map {; $_->{Names} => $_ } map { decode_json($_) } @lines;
  };

  return \%container_named;
}

sub _existing_container ($class) {
  my $containers = $class->_get_containers;
  return $containers->{ $class->container_name_for_cwd };
}

sub container_name_for_cwd {
  my $digest = sha1_hex("$ABS_CWD");
  return "cyd-" . substr($digest, 0, 12);
}

sub load_config {
  my $config_file = path('~/.cyrus-docker')->mkdir->child('config');
  return {} unless -e $config_file;
  return decode_json($config_file->slurp);
}
